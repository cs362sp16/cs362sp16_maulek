        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:#include <time.h>
        -:    8:#define MAX_TESTS 1300
        -:    9:
        -:   10://This randomly tests gardens
        -:   11:
        1:   12:int main(int argc, char *argv[]) {
        -:   13:
        1:   14:	srand(time(NULL));
        1:   15:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        -:   16:		sea_hag, tribute, smithy};
        -:   17:
        -:   18:	//int i, choice1, choice2, choice3, ranseed, test;
        -:   19:	int i, ranseed, test;
        1:   20:	if(argc > 1){
    #####:   21:		ranseed = atoi(argv[1]);
    #####:   22:		printf("Seed Set to %d\n", ranseed);
        -:   23:	}
        -:   24:	else{
        1:   25:		ranseed = 42;
        -:   26:	}
        -:   27:	struct gameState g;
        1:   28:	struct gameState *playGame = &g;
        1:   29:	srand(time(NULL));
        1:   30:	printf("Running Random Card Test for Gardens\n");
        1:   31:	int players = 4;
        1:   32:	int creatingGame = initializeGame(players, k, ranseed, playGame);
        1:   33:	if(creatingGame != 0){
    #####:   34:		printf("Failed to initialize game\n");
    #####:   35:		exit(0);
        -:   36:	}
        -:   37:
        -:   38:
     1301:   39:	for (i = 0; i < MAX_TESTS; i++) {
     1300:   40:		whoseTurn(playGame);
        -:   41:		/*	choice1 = rand() % 100 + i;
        -:   42:			choice2 = rand() % 100 + i;
        -:   43:			choice3 = rand() % 100 + i;*/
     1300:   44:		int handPos = rand() % 100 + i;
     1300:   45:		int bonus = rand() % 100 + i;
        -:   46:
        -:   47:
     1300:   48:		test = cardEffect(gardens, 0, 0, 0, playGame, handPos, &bonus);		//Call to gardens
     1300:   49:		if(test != 0){
    #####:   50:			printf("Failed to run gardens card\n");
    #####:   51:			exit(0);
        -:   52:		}
     1300:   53:		endTurn(playGame);
        -:   54:	}
        1:   55:	printf("Test Completed succesfully\n");
        -:   56:
        1:   57:	return 0;
        -:   58:
        -:   59:}
