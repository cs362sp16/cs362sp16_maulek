File 'testdominion.c'
Lines executed:95.65% of 46
Creating 'testdominion.c.gcov'

        -:    0:Source:testdominion.c
        -:    0:Graph:testdominion.gcno
        -:    0:Data:testdominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include <stdio.h>
        -:    3:#include "rngs.h"
        -:    4:#include <stdlib.h>
        -:    5:#include <time.h>
        -:    6:
        1:    7:int main(int argc, char *argv[]){
        -:    8:	int i, j, money, seed;
        -:    9:	struct gameState g;
        1:   10:	struct gameState *p = &g;
        1:   11:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        -:   12:		sea_hag, tribute, smithy};
        1:   13:	int players = rand() % 3 + 2;
        1:   14:	if(argc > 1){
    #####:   15:		seed = atoi(argv[1]);
    #####:   16:		 initializeGame(players, k, seed, p);
        -:   17:	}
        -:   18:	else{
        1:   19:		srand(time(NULL));
        1:   20:		seed = rand() % 100;
        1:   21:		initializeGame(players, k, seed, p);
        -:   22:
        -:   23:	}
        -:   24:
        -:   25:
      247:   26:	while(!isGameOver(p)){
      245:   27:		money = 0;
      245:   28:		printf("Player %d:\n", whoseTurn(p));
      245:   29:		printf("\t-----Action Phase-----\n");
        -:   30:		/*---------------ACTION PHASE-------------------*/
     1030:   31:		for(i = 0; i < numHandCards(p); i++){
      785:   32:			if (handCard(i, p) == copper){
      185:   33:				money++;         
        -:   34:			}
      600:   35:			else if (handCard(i, p) == silver){
      191:   36:				money += 2;
        -:   37:			}
      409:   38:			else if (handCard(i, p) == gold){
       10:   39:				money += 3;
        -:   40:			}
        -:   41:		}
        -:   42:
      587:   43:		for(i = 0; i < numHandCards(p); i++){
     4316:   44:			for(j = 0; j < 10; j++){
     3974:   45:				if(handCard(i, p) == k[j]){
      117:   46:					printf("\tPlaying action card\n");
      117:   47:					playCard(i, -1, -1, -1, p);
      117:   48:					goto buyphase;
        -:   49:				}					
        -:   50:			}
        -:   51:		}
        -:   52:
        -:   53:
        -:   54:buyphase:
        -:   55:
        -:   56:
        -:   57:		/*---------------BUY PHASE-------------------*/
      245:   58:		printf("\t-----Buy Phase-----\n");
      245:   59:		int choice = rand() % 9;
      245:   60:		int action_card = k[choice];
      245:   61:		printf("\tBuying Kingdom Card . . . \n");
      245:   62:		buyCard(action_card, p);
      245:   63:		if (money >= 8) {
        9:   64:			printf("\t1: bought province\n");
        9:   65:			buyCard(province, p);
        -:   66:		}
      236:   67:		else if (money >= 6){
       26:   68:			printf("\t1: bought gold\n");
       26:   69:			buyCard(gold, p);
        -:   70:		}
      210:   71:		else if (money >= 3){
       76:   72:			printf("\t1: bought silver\n");
       76:   73:			buyCard(silver, p);
        -:   74:		}
      245:   75:		printf("Player %d: endTurn\n\n\n", whoseTurn(p));
        -:   76:
      245:   77:		endTurn(p);    		
        -:   78:	}			
        -:   79:
        4:   80:	for(i = 0; i < players; i++){
        3:   81:		printf("-------Score For Player %d is %d\n", i, scoreFor(i, p));
        -:   82:	/*	if(scoreFor(i, p) >= score){
        -:   83:			winner = i;*/ 
        -:   84:		//	score = scoreFor(i, p);
        -:   85:		
        -:   86:	}
        -:   87:
        -:   88:
        1:   89:	return 0;
        -:   90:
        -:   91:}
