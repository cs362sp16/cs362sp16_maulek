        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:#include <time.h>
        -:    8:#define MAX_TESTS 1300
        -:    9:
        -:   10://This randomly tests embargo
        -:   11:
        1:   12:int main(int argc, char *argv[]) {
        -:   13:
        1:   14:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        -:   15:		sea_hag, tribute, smithy};
        -:   16:
        -:   17:	int i, ranseed, test;
        1:   18:	if(argc > 1){
    #####:   19:		ranseed = atoi(argv[1]);
    #####:   20:		printf("Seed Set to %d\n", ranseed);
        -:   21:	}
        -:   22:	else{
        1:   23:		ranseed = 42;
        -:   24:	}
        -:   25:	struct gameState g;
        1:   26:	struct gameState *playGame = &g;
        1:   27:	srand(time(NULL));
        1:   28:	printf("Running Random Card Test for Embargo\n");
        1:   29:	int players = rand() % 4;
        1:   30:	int creatingGame = initializeGame(players, k, ranseed, playGame);
        1:   31:	if(creatingGame != 0){
    #####:   32:		printf("Failed to initialize game\n");
    #####:   33:		exit(0);
        -:   34:	}
        -:   35:
        -:   36:
     1301:   37:	for (i = 0; i < MAX_TESTS; i++) {
     1300:   38:		whoseTurn(playGame);
     1300:   39:		int handPos = rand() % 100 + i;
     1300:   40:		int bonus = rand() % 100 + i;
        -:   41:
        -:   42:
     1300:   43:		test = cardEffect(embargo, 0, 0, 0, playGame, handPos, &bonus);		//Call to embargo
     1300:   44:		if(test != 0){
    #####:   45:			printf("Failed to run embargo card\n");
    #####:   46:			exit(0);
        -:   47:		}
        -:   48:
     1300:   49:		endTurn(playGame);
        -:   50:	}
        1:   51:	printf("Test Completed succesfully\n");
        -:   52:
        1:   53:	return 0;
        -:   54:}
